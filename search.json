[{"title":"My Vim Broke — Or My Go?","url":"https://budidharmawan.com/2016/06/09/My-Vim-Broke/","content":"For the past three days, I have a problem with my Vim. My MacVim, to be precise. I have been working on some Golang projects lately, and I use vim-go for quite some time. For reasons unknown &mdash; okay, I forgot what I did &mdash; it spewed out an error saying that &quot;vim-go: goimports does not support srcdir&quot; when I tried to save a file.\nAt that very first occurrence I decided: I will not Google this shit.\nI took notes for the steps I and hoped I  don’t get stuck and succumb.As it turns out, by some great luck, I sorta made it. Here’s what happened.\nTL;DR &rarr; I re-installed some stuff using different configurations.\nThe error popped out. MacVim forced me to tap a key after the error shows up and I can get to edit again. I checked my .vimrc&hellip; nothing seems out of context. I checked my go env, all looks good. Strange.\nI remember I installed go from the official package, so my $GOROOT is pointed to /usr/local/go. Oh well, since it’s been long since I updated to 1.5 anyway, let’s just demolish them and try installing them via Homebrew. Hello, 1.6.2!\nMacVim still broken. Of course.\nAfter I read some :help vim-go, I tried :GoUpdateBinaries and let it install things to my $GOPATH/bin. Error message still persists. At that time I got my iTerm opened and I just want to double check my environment variables on my .zshrc.\nSo I fired up vim &mdash; hooray muscle memory.\nJust when I opened my session menu, I thought hey, “Hold on a second. Let’s try do some Go stuff from terminal vim“. Shocking truth: everything works. The troubled goimports, :GoDef, everything works.\nFor the next four days, I did my daily tasks using terminal vim. I really have nothing to complain except for its rendering time.\nFour days. Slow renders. I miss MacVim.\nI tried switching back and used gofmt instead of goimports. It works, but no imports automation. Sucks.\nI tried re-installing my MacVim with system Ruby, Python 2, etc. Back to basic. No Python 3, lua-jit, etc. Removed not-that-much-used plugins&hellip; no luck. Then I realized, gofmt is installed in /usr/local/go/bin and it works, but my $GOPATH/bin didn’t get picked up.\nI set my$GOBIN, then. I pointed my $GOBIN to /usr/local/go/bin and run :GoUpdateBinaries.\nVoila! MacVim now works with vim-go and all its binaries installed on /usr/local/go/bin.\nConclusionsI don’t know which steps of these:\n\nRe-installed Go using Homebrew, now using Go 1.6.2 instead of 1.5\nRe-installed MacVim using system Ruby\nPoint $GOBIN to /usr/local/go/bin\n\n&hellip; that actually needed to be done to fix the goimports thingy. But I fixed it without Googling. I think I’ll do this kind of practice every once in a while. I don’t one to be that one guy who just so good at querying questions."},{"title":"Hexo, Github Pages, CloudFlare, SSL : Holy Shit","url":"https://budidharmawan.com/2016/05/30/Hexo-Github-Pages-Cloudflare-SSL/","content":"If the title is not obscure enough, this post is all you need to create a Hexo blog, publish it on Github Pages, set up your custom domain, and use the flexible SSL from CloudFlare. Your shiny blag will soon be served over https! Yay!\nI assume that you are familiar with Hexo and Github, and you know how to push things to a repository.\nIf you’re not &mdash; but willing to learn, &mdash; spend a couple minutes doing Christopher’s “Getting Started with the Hexo Blogging Framework“ and Github’s Hello World Project. As the more advanced people already being impatient, let’s get started.This post is heavily inspired by Sheharyar Naseer’s article “Set Up SSL on Github Pages With Custom Domains for Free“ with some adaptation for Hexo. Check out his blog! He writes interesting stuffs.\nTL;DR\nCreate a Github repository &lt;username&gt;.github.io\nInstall hexo-deployer-git\nChange the main _config.yml to include git deployment\nGenerate and deploy to the repository: hexo g &amp;&amp; hexo d\nUpdate A-records and CNAME on CloudFlare to match Github’s IP\nChange CloudFlare SSL setting on Crypto tab to Flexible\nAdd CNAME file with your domain on source directory\nRe-generate and re-deploy to the repository\n\nGetting Your Blog Up on Github PagesSo you wrote your post and it’s served on your port 4000 when you run hexo s. Neat.  Now, create a new repository on Github called &lt;username&gt;.github.io (mine would be budi.github.io) &mdash; yes, that is a repository name.\nYou would also want to install hexo-deployer-git to ease up things. On your project directory, run:\nnpm install hexo-deployer-git --save\nEdit your main _config.yml file to include these lines:\ndeploy:\n  type: git\n  repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git\nIf you haven’t setup your SSH public key, you might want to use https on the repo field instead, like so:\ndeploy:\n  type: git\n  repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git\nGenerate your blog with hexo g, and you will see files piling up on the public folder of your project directory. Now run hexo d, wait until it’s all done and viola! Your blog is now up on Github Pages! Open up &lt;username&gt;.github.io on your browser and rejoice.\nSetting Up CloudFlareI’m not gonna go into details here, just follow these steps to change your domain name servers to use CloudFlare. If you already setup your domain using CloudFlare before, you can skip ahead to the next step. Upon adding your website, CloudFlare should automatically detect and generate records that match the records on your registrar.\nWhile you’re on CloudFlare, you can add your domain to point to your Github Pages. My strategy is to use my apex domain (budidharmawan.com) and redirect my www subdomain to my apex domain. So on my DNS records, I made sure of these three records:\nTYPE    NAME                VALUE               TTL         DNS &amp; HTTP PROXY\n----------------------------------------------------------------------------\nA       budidharmawan.com   192.30.252.153      Automatic   Both\nA       budidharmawan.com   192.30.252.154      Automatic   Both\nCNAME   www                 budidharmawan.com   Automatic   Both\nThe two IP addresses above is what Github use to serve custom domains. Still on CloudFlare, also check on the Crypto tab on your domain and make sure to set the SSL to Flexible.\nNext step is to setup CNAME so that Github knows you’re using custom domain. On your source directory, add a file called CNAME &mdash; all caps &mdash; with your domain name in it. You can just run this command:\necho your-domain.com &gt;&gt; CNAME\nGenerate and deploy your blog to your Github page once again (on your project directory):\nhexo g &amp;&amp; hexo d\nCheck if the site is live on your custom domain. Open up your browser and go to your custom domain. It should already display your site! Nice~\nDetails, details, detailsNow you can actually try to open your site over https and it will show up just fine. But there are some things you need to add/change to make it better.\nOn your main _config.yml file, edit the url setting to use https:\nurl: https://your-domain.com\nAdd canonical link to your site’s &lt;head&gt;:\n&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%= config.url %&gt;&quot; /&gt;\nAs mentioned on Sheharyar’s post, also add this script on your head to redirect user from http to https:\n&lt;script type=&quot;text/javascript&quot;&gt;\n  var host = &quot;yoursite.com&quot;;\n  if ((host == window.location.host) &amp;&amp; (window.location.protocol != &quot;https:&quot;))\n    window.location.protocol = &quot;https&quot;;\n&lt;/script&gt;\nThat’s It!Now your site is served over https! For free! &mdash; Aside for the domain etc, etc..\nLet me know if you have anything to say on the comment section :)"},{"title":"Hello World v.0.0.1","url":"https://budidharmawan.com/2016/05/28/Hello-World-v-0-0-1/","content":"Over the past few days I keep thinking what makes me what I am today &mdash; a lazy one liner. Having realized that I started everything early, I was blinded with the thought that I got a heads up. I became the cocky rabbit who got beaten by the turtle. Took me a while, but I’m done racing.\nThis time I will not run.\nI’ll write."},{"title":"The Fucking Hit List","url":"https://budidharmawan.com/Hit-List/index.html","content":"This blog is far from what I want it to be, and it will remain undone for all I care. As a reminder to myself, these are the things I expected to implement soon enough before I can brag about it.\n\nGet the blog up and running on my Github pages, Pushed May 29, 2016\nSet up my domain to point there, Pointed May 29, 2016\nPublish another post about how you create this blog, Published May 30, 2016\nOpen up comments section Opened May 30, 2016\nImplement good looking archives page,\nGet search up and running,\nMake a layout for “photos” post,\nPublish the theme on a public repository.\n"},{"title":"The Best Way To Stalk Bubs","url":"https://budidharmawan.com/Colophon/index.html","content":"Before anything else, the first thing you gotta know about him is that he often writes about himself in third person only to make himself feel more down-to-earth. He promised &mdash; even though he consciously knows that he will break it soon enough &mdash; to actively contribute to the communities at least on Github.\nEven though lately he doesn’t tweet that much and keep resetting his Instagram account[1], those two channels are still the ones that are the most curent and available for public.\nIf you’re into gaming and avidly play DOTA[2], you won’t be amazed by his records of 45% winning rate. Feel free to add him on Steam, though. He’s a good support.\nIf all else fails, you can just Google “Budi Dharmawan” and see if you can find anything.\n1. Because fuck integrity. &cularr;2. What? Seriously? &cularr;"}]