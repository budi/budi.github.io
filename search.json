[{"title":"Hoarder","url":"https://budidharmawan.com/2017/05/05/Hoarder/","content":"<p>These past weeks showed me something that I have been denying all my life. I’m a memory hoarder. I use some serious space in my room to keep pictures, letters (well, mostly envelopes, really), postcards, gig pins, bracelets, descend commemorative jacket, 17th birthday gift bag, another jacket, a cassette tape, another bag, shoes…</p>\n<p>The list goes on. But it has to stop. Who am I to forbid time to flow and force her to fly?</p>\n<p>So from now, I’ll try to forget and hopefully succeed.<br><a id=\"more\"></a></p>"},{"title":"Vim + Standard.js","url":"https://budidharmawan.com/2016/09/22/Vim-Standard-js/","content":"<p>I never really took an in-depth look into <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a> because for the past <del>weeks</del> <del>months</del> year my work only demands things grown out of <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\" rel=\"external\">Ruby</a> or <a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">Go</a>, and if I have to write things in JavaScript (that’s quite a lot, too, but let’s save it for later), I keep using my outdated <code>.eslintrc</code> because that’s how I usually typed them.</p>\n<p>After spending an hour on <a href=\"http://www.reactjsprogram.com/\" target=\"_blank\" rel=\"external\">ReactJS Program</a> &mdash;<sup><sub>kudos to Tyler McGinnis, what a great mentor!</sub></sup>&mdash; I finally realized that it is time to update my linter configurations. Nobody likes to do that. This ritual has to end. So, no motives, I was just being lazy when I found out about <a href=\"http://standardjs.com/\" target=\"_blank\" rel=\"external\">StandardJS</a>.</p>\n<p>Where have I been? I know, right? This whole article is about laziness and living under a rock. Also, I hate iOS 10.<br><a id=\"more\"></a><br>Naturally, the first thing I did was, as stated on <a href=\"https://github.com/feross/standard\" target=\"_blank\" rel=\"external\">StandardJS’ Github Page</a>:</p>\n<pre><code>npm install standard --global\n</code></pre><p>Then I scrolled down a bit and found out that the command <code>standard</code> can be used as a <a href=\"https://github.com/scrooloose/syntastic\" target=\"_blank\" rel=\"external\">Syntastic</a> checker as well. Neat. So I put this on my <code>.vimrc</code></p>\n<pre><code>let g:syntastic_javascript_checkers = [&apos;standard&apos;]\nautocmd bufwritepost *.js silent !standard-format -w %\nset autoread\n</code></pre><p>It worked. It auto-formatting my poorly written JavaScript. No semicolons. Cool. So I boldly removed my other checkers (at that time, <a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">ESlint</a> and <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"external\">JShint</a>), and all their <code>rc</code> files.</p>\n<p>As I mentioned earlier, I was doing this <a href=\"http://www.reactjsprogram.com/\" target=\"_blank\" rel=\"external\">ReactJS Program</a>, and boy, jsx sure makes me cringe. That’s when I found out that the <code>standard</code> Syntastic checker is not as.. hm, how should I put it.. strict.</p>\n<p>I messed things up hoping for a warning to pop out, but it didn’t. Well, I guess it’s not <em>really there</em> yet.</p>\n<p>Fuck it. I’m being lazy. Phoenix Down.</p>\n<pre><code>npm install -g eslint eslint-config-standard \\\n  eslint-config-standard-react eslint-config-standard-jsx \\\n  eslint-plugin-promise eslint-plugin-react eslint-plugin-standard\n</code></pre><p>There.</p>\n<p>I resurrected my <code>.eslintrc</code> to my home folder, swapping all my rules with only this line:</p>\n<pre><code>{ &quot;extends&quot;: [&quot;standard&quot;, &quot;standard-react&quot;] }\n</code></pre><p>Then I found out that <a href=\"https://github.com/maxogden/standard-format\" target=\"_blank\" rel=\"external\">standard-format</a> is actually <strong>experimental</strong>, so here’s my final <code>.vimrc</code> to get ESlint and StardardJS dance with my Vim.</p>\n<pre><code>let g:syntastic_javascript_checkers = [&apos;standard&apos;, &apos;eslint&apos;]\nlet g:syntastic_javascript_standard_exec = &quot;/usr/local/bin/standard&quot;\nlet g:syntastic_javascript_eslint_exec = &quot;/usr/local/bin/eslint&quot;\nautocmd bufwritepost *.js silent !standard --fix -w %\nset autoread\n</code></pre><p>Laziness 1 - 0 Configs.</p>"},{"title":"My Vim Broke — Or My Go?","url":"https://budidharmawan.com/2016/06/09/My-Vim-Broke/","content":"<p>For the past three days, I have a problem with my Vim. My <a href=\"https://macvim-dev.github.io/macvim/\" target=\"_blank\" rel=\"external\">MacVim</a>, to be precise. I have been working on some <a href=\"https://golang.org/\" target=\"_blank\" rel=\"external\">Golang</a> projects lately, and I use <a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" rel=\"external\">vim-go</a> for quite some time. For reasons unknown &mdash; okay, I <em>forgot</em> what I did &mdash; it spewed out an error saying that <code>goimports does not support srcdir</code> when I tried to save a file.</p>\n<p>At that very first occurrence, I decided: <strong><em>I will not Google this shit</em></strong>.</p>\n<p>I took notes for the steps I did and hoped I  don’t get stuck and succumb.<br><a id=\"more\"></a><br>As it turns out, by some great luck, it’s fixed. Here’s what happened.</p>\n<p><strong>TL;DR</strong> &rarr; I re-installed some stuff using different configurations.</p>\n<p>The error popped out. MacVim forced me to tap a key after the error shows up and I can get to edit again. I checked my <code>.vimrc</code>&hellip; nothing seems out of context. I checked my <code>go env</code>, all looks good. Strange.</p>\n<p>I remember I installed go from the official package, so my <code>$GOROOT</code> is pointed to <code>/usr/local/go</code>. Oh well, it’s been long since I updated to 1.5 anyway, let’s just demolish them and try installing them via <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a>. So I did. I removed <code>usr/local/go</code> and execute <code>brew install go</code>. Hello, 1.6.2!</p>\n<p>MacVim still broken. Of course.</p>\n<p>After I read some <code>:help vim-go</code>, I tried <code>:GoUpdateBinaries</code> and let it install things to my <code>$GOPATH/bin</code>. Error message still persists. At that time I got my <a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm</a> opened and I just want to double check my environment variables on my <code>.zshrc</code>.</p>\n<p>So I fired up <code>vim</code> &mdash; <sup><sub>hooray muscle memory</sub></sup>.</p>\n<p>Just when I opened my <a href=\"https://github.com/xolox/vim-session\" target=\"_blank\" rel=\"external\">session</a> menu, I thought hey, “<em>Hold on a second. Let’s try do some Go stuff from terminal vim</em>“. Shocking truth: <strong>everything works</strong>. The troubled <code>goimports</code>, <code>:GoDef</code>, everything works.</p>\n<p>For the next four days, I did my daily tasks using terminal vim. I really have nothing to complain except for its rendering time.</p>\n<p>Four days. Slow renders. I miss MacVim.</p>\n<p>I tried switching back and used <code>gofmt</code> instead of <code>goimports</code>. It works, but no imports automation. Sucks.</p>\n<p>I tried re-installing my MacVim with system Ruby, Python 2, etc. Back to basic. No Python 3, lua-jit, etc. Removed not-that-much-used plugins&hellip; no luck. Then I realized, <code>gofmt</code> is installed in <code>/usr/local/go/bin</code> and it works, but my <code>$GOPATH/bin</code> didn’t get picked up.</p>\n<p>I set my<code>$GOBIN</code>, then. I pointed my <code>$GOBIN</code> to <code>/usr/local/go/bin</code> and run <code>:GoUpdateBinaries</code>.</p>\n<p>Voila! MacVim now works with <code>vim-go</code> and all its binaries installed on <code>/usr/local/go/bin</code>.</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>I’m not really sure I fixed it because I:</p>\n<ul>\n<li>Re-installed Go using Homebrew, now using Go 1.6.2 instead of 1.5</li>\n<li>Re-installed MacVim using system Ruby</li>\n<li>Point <code>$GOBIN</code> to <code>/usr/local/go/bin</code></li>\n</ul>\n<p>&hellip; but I fixed it without Googling. It takes more time, for sure, but I think I’ll do this kind of practice every once in a while. I don’t want to be that one guy who just so good at querying questions. I want to fix things.</p>"},{"title":"Hexo, Github Pages, CloudFlare, SSL : Holy Shit","url":"https://budidharmawan.com/2016/05/30/Hexo-Github-Pages-Cloudflare-SSL/","content":"<p>If the title is not obscure enough, this post is all you need to create a <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> blog, publish it on <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Pages</a>, set up your custom domain, and use the <a href=\"https://www.cloudflare.com/ssl/\" target=\"_blank\" rel=\"external\">flexible SSL</a> from <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">CloudFlare</a>. Your shiny <a href=\"https://xkcd.com/148/\" target=\"_blank\" rel=\"external\">blag</a> will soon be served over https! Yay!</p>\n<p>I assume that you are familiar with Hexo and Github, and you know how to push things to a repository.</p>\n<p>If you’re not &mdash; but willing to learn, &mdash; spend a couple minutes doing Christopher’s “<a href=\"https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/\" target=\"_blank\" rel=\"external\">Getting Started with the Hexo Blogging Framework</a>“ and Github’s <a href=\"https://guides.github.com/activities/hello-world/\" target=\"_blank\" rel=\"external\">Hello World Project</a>. As the more advanced people already being impatient, let’s get started.<br><a id=\"more\"></a><br>This post is heavily inspired by Sheharyar Naseer’s article “<a href=\"https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/\" target=\"_blank\" rel=\"external\">Set Up SSL on Github Pages With Custom Domains for Free</a>“ with some adaptation for Hexo. Check out his blog! He writes interesting stuffs.</p>\n<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><ul>\n<li>Create a Github repository <code>&lt;username&gt;.github.io</code></li>\n<li>Install <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"external\">hexo-deployer-git</a></li>\n<li>Change the main <code>_config.yml</code> to include git deployment</li>\n<li>Generate and deploy to the repository: <code>hexo g &amp;&amp; hexo d</code></li>\n<li>Update <strong>A</strong>-records and <strong>CNAME</strong> on CloudFlare to match <a href=\"https://help.github.com/articles/setting-up-an-apex-domain/\" target=\"_blank\" rel=\"external\">Github’s IP</a></li>\n<li>Change CloudFlare <strong>SSL</strong> setting on <code>Crypto</code> tab to <code>Flexible</code></li>\n<li>Add CNAME file with your domain on <code>source</code> directory</li>\n<li>Re-generate and re-deploy to the repository</li>\n</ul>\n<h2 id=\"Getting-Your-Blog-Up-on-Github-Pages\"><a href=\"#Getting-Your-Blog-Up-on-Github-Pages\" class=\"headerlink\" title=\"Getting Your Blog Up on Github Pages\"></a>Getting Your Blog Up on Github Pages</h2><p>So you wrote your post and it’s served on your port 4000 when you run <code>hexo s</code>. Neat.  Now, create a new repository on Github called <code>&lt;username&gt;.github.io</code> (mine would be <a href=\"https://github.com/budi/budi.github.io\" target=\"_blank\" rel=\"external\">budi.github.io</a>) &mdash; yes, that is a repository name.</p>\n<p>You would also want to install <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"external\">hexo-deployer-git</a> to ease up things. On your project directory, run:</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>Edit your main <code>_config.yml</code> file to include these lines:</p>\n<pre><code>deploy:\n  type: git\n  repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git\n</code></pre><p>If you haven’t <a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"external\">setup your SSH public key</a>, you might want to use https on the <code>repo</code> field instead, like so:</p>\n<pre><code>deploy:\n  type: git\n  repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git\n</code></pre><p>Generate your blog with <code>hexo g</code>, and you will see files piling up on the <code>public</code> folder of your project directory. Now run <code>hexo d</code>, wait until it’s all done and viola! Your blog is now up on Github Pages! Open up <code>&lt;username&gt;.github.io</code> on your browser and rejoice.</p>\n<h2 id=\"Setting-Up-CloudFlare\"><a href=\"#Setting-Up-CloudFlare\" class=\"headerlink\" title=\"Setting Up CloudFlare\"></a>Setting Up CloudFlare</h2><p>I’m not gonna go into details here, just follow <a href=\"https://support.cloudflare.com/hc/en-us/categories/200275218-Getting-Started\" target=\"_blank\" rel=\"external\">these steps</a> to change your domain name servers to use CloudFlare. If you already setup your domain using CloudFlare before, you can skip ahead to the next step. Upon adding your website, CloudFlare should automatically detect and generate records that match the records on your registrar.</p>\n<p>While you’re on CloudFlare, you can add your domain to point to your Github Pages. My strategy is to use my apex domain (budidharmawan.com) and redirect my <code>www</code> subdomain to my apex domain. So on my DNS records, I made sure of these three records:</p>\n<pre><code>TYPE    NAME                VALUE               TTL         DNS &amp; HTTP PROXY\n----------------------------------------------------------------------------\nA       budidharmawan.com   192.30.252.153      Automatic   Both\nA       budidharmawan.com   192.30.252.154      Automatic   Both\nCNAME   www                 budidharmawan.com   Automatic   Both\n</code></pre><p>The two IP addresses above is what Github use to serve custom domains. Still on CloudFlare, also check on the <code>Crypto</code> tab on your domain and make sure to set the SSL to <code>Flexible</code>.</p>\n<p>Next step is to setup CNAME so that Github knows you’re using custom domain. On your <code>source</code> directory, add a file called <code>CNAME</code> &mdash; all caps &mdash; with your domain name in it. You can just run this command:</p>\n<pre><code>echo your-domain.com &gt;&gt; CNAME\n</code></pre><p>Generate and deploy your blog to your Github page once again (on your project directory):</p>\n<pre><code>hexo g &amp;&amp; hexo d\n</code></pre><p>Check if the site is live on your custom domain. Open up your browser and go to your custom domain. It should already display your site! Nice~</p>\n<h2 id=\"Details-details-details\"><a href=\"#Details-details-details\" class=\"headerlink\" title=\"Details, details, details\"></a>Details, details, details</h2><p>Now you can <em>actually</em> try to open your site over https and it will show up just fine. But there are some things you need to add/change to make it better.</p>\n<p>On your main <code>_config.yml</code> file, edit the <code>url</code> setting to use https:</p>\n<pre><code>url: https://your-domain.com\n</code></pre><p>Add canonical link to your site’s <code>&lt;head&gt;</code>:</p>\n<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%= config.url %&gt;&quot; /&gt;\n</code></pre><p>As mentioned on Sheharyar’s post, also add this script on your head to redirect user from http to https:</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var host = &quot;yoursite.com&quot;;\n  if ((host == window.location.host) &amp;&amp; (window.location.protocol != &quot;https:&quot;))\n    window.location.protocol = &quot;https&quot;;\n&lt;/script&gt;\n</code></pre><h2 id=\"That’s-It\"><a href=\"#That’s-It\" class=\"headerlink\" title=\"That’s It!\"></a>That’s It!</h2><p>Now your site is served over https! For free! &mdash; <sup><sub>Aside for the domain etc, etc..</sub></sup></p>"},{"title":"Hello World v.0.0.1","url":"https://budidharmawan.com/2016/05/28/Hello-World-v-0-0-1/","content":"<p>Over the past few days I keep thinking what makes me what I am today &mdash; <sub><sup>a lazy one liner</sup></sub>. Having realized that I started everything early, I was blinded with the thought that I got a heads up. I became the cocky rabbit who got beaten by the turtle. Took me a while, but I’m done racing.</p>\n<p>This time I will not run.</p>\n<p>I’ll write.<br><a id=\"more\"></a></p>"},{"title":"The Best Way To Stalk Bubs","url":"https://budidharmawan.com/Colophon/index.html","content":"<p>Before anything else, the first thing you gotta know about him is that he often writes about himself in third person only to make himself feel more down-to-earth. He promised &mdash; even though he <sub><sup>consciously</sup></sub> knows that he will break it soon enough &mdash; to actively contribute to the <em>communities</em> at least on <a href=\"https://github.com/budi/\" target=\"_blank\" rel=\"external\">Github</a>.</p>\n<p>Even though lately he doesn’t <a href=\"https://twitter.com/budi\" target=\"_blank\" rel=\"external\">tweet</a> that much and keep resetting his <a href=\"https://instagram.com/mmmbut/\" target=\"_blank\" rel=\"external\">Instagram</a> account<sup id=\"fn1-p\"><a href=\"#fn1-n\">[1]</a></sup>, those two channels are still the ones that are the most curent and available for public.</p>\n<p>If you’re into gaming and avidly play DOTA<sup id=\"fn2-p\"><a href=\"#fn2-n\">[2]</a></sup>, you won’t be amazed by his <a href=\"http://www.dotabuff.com/players/115010700\" target=\"_blank\" rel=\"external\">records</a> of 45% winning rate. Feel free to add him on <a href=\"http://steamcommunity.com/id/mmmbut/\" target=\"_blank\" rel=\"external\">Steam</a>, though. He’s a good support.</p>\n<p>If all else fails, you can just Google “Budi Dharmawan” and see if you can find anything.</p>\n<section class=\"footnotes\"><p>1. Because fuck <a href=\"https://en.wikipedia.org/wiki/Data_integrity\" target=\"_blank\" rel=\"external\">integrity</a>. <sup id=\"fn1-n\"><a href=\"#fn1-p\">&cularr;</a></sup></p><p>2. What? <a href=\"http://blog.dota2.com/\" target=\"_blank\" rel=\"external\">Seriously</a>? <sup id=\"fn2-n\"><a href=\"#fn2-p\">&cularr;</a></sup></p></section>"},{"title":"The Fucking Hit List","url":"https://budidharmawan.com/Hit-List/index.html","content":"<p>This blog is far from what I want it to be, and it will remain undone for all I care. As a reminder to myself, these are the things I expected to implement soon enough before I can brag about it.</p>\n<ol>\n<li><del>Get the blog up and running on my Github pages,</del> <sup>Pushed May 29, 2016</sup></li>\n<li><del>Set up my domain to point there,</del> <sup>Pointed May 29, 2016</sup></li>\n<li><del>Publish another post about how you create this blog,</del> <sup>Published May 30, 2016</sup></li>\n<li><del>Open up comments section,</del> <sup>Opened May 30, 2016</sup></li>\n<li><del>Implement good looking archives page,</del> <sup>Published June 29, 2016</sup></li>\n<li>Get search up and running,</li>\n<li>Make a layout for “photos” post,</li>\n<li>Publish the theme on a public repository.</li>\n</ol>"}]